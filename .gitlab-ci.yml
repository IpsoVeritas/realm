image: gcr.io/brickchain-docker/gitlab-builder-base:alpine

variables:
  REPO: gcr.io/brickchain-infra/realm-ng
 
before_script:
  - mkdir -p /go/src/gitlab.brickchain.com/brickchain
  - ln -s $CI_PROJECT_DIR /go/src/gitlab.brickchain.com/brickchain/$CI_PROJECT_NAME
  - cd /go/src/gitlab.brickchain.com/brickchain/$CI_PROJECT_NAME
  - export IMAGE=${REPO}:${CI_BUILD_REF}
  
stages:
  - test
  - build
  - docker
  - deploy

test:
  image: gcr.io/brickchain-docker/gitlab-builder-go:1.10
  stage: test
  script:
    - go generate cmd/realm/main.go
    - go test -v -cover $(go list ./... | grep -v /vendor/)

build:
  image: gcr.io/brickchain-docker/gitlab-builder-go:1.10
  stage: build
  script:
    - go generate pkg/version/version.go
    - go generate cmd/realm/main.go
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o realm-linux-amd64 cmd/realm/main.go
    # - GOOS=linux GOARCH=386 CGO_ENABLED=1 go build -ldflags '-extldflags "-static"' -o realm-linux-386
  artifacts:
    paths:
    - realm-linux-*

# build-darwin:
#   image: gcr.io/brickchain-docker/gitlab-builder-gocross-darwin:1.10
#   stage: build
#   script:
#     - go generate constant/version.go
#     - go generate
#     - CC=o64-clang CXX=o64-clang++ GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -o realm-darwin-amd64
#     - CC=o32-clang CXX=o32-clang++ GOOS=darwin GOARCH=386 CGO_ENABLED=1 go build -o realm-darwin-386
#   artifacts:
#     paths:
#     - realm-darwin-*

# build-arm:
#   image: gcr.io/brickchain-docker/gitlab-builder-gocross-arm:1.10
#   stage: build
#   script:
#     - go generate constant/version.go
#     - go generate
#     - CC=arm-linux-gnueabihf-gcc-5 CXX=arm-linux-gnueabihf-g++-5 GOOS=linux GOARCH=arm GOARM=5 CGO_ENABLED=1 CGO_CFLAGS="-march=armv5 -fPIC" CGO_CXXFLAGS="-march=armv5 -fPIC" go build -tags netgo -ldflags '-extldflags "-static"' -o realm-linux-armv5
#     - CC=arm-linux-gnueabihf-gcc-5 CXX=arm-linux-gnueabihf-g++-5 GOOS=linux GOARCH=arm GOARM=6 CGO_ENABLED=1 CGO_CFLAGS="-march=armv6 -fPIC" CGO_CXXFLAGS="-march=armv6 -fPIC" go build -tags netgo -ldflags '-extldflags "-static"' -o realm-linux-armv6
#     - CC=arm-linux-gnueabihf-gcc-5 CXX=arm-linux-gnueabihf-g++-5 GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=1 CGO_CFLAGS="-march=armv7-a -fPIC" CGO_CXXFLAGS="-march=armv7-a -fPIC" go build -tags netgo -ldflags '-extldflags "-static"' -o realm-linux-armv7
#     - CC=aarch64-linux-gnu-gcc-5 CXX=aarch64-linux-gnu-g++-5 GOOS=linux GOARCH=arm64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o realm-linux-arm64
#   artifacts:
#     paths:
#     - realm-linux-arm*

docker:
  stage: docker
  script:
    - test -e /var/run/docker.sock || export DOCKER_HOST=tcp://localhost:2375
    - vaultenv download secret/env/gitlab-ci/gcr-pusher.json ~/gcr-pusher.json
    - docker login -u _json_key -p "$(cat ~/gcr-pusher.json)" https://gcr.io
    - docker build -t $IMAGE -f cmd/realm/Dockerfile --build-arg PORT=6593 .
    - docker push $IMAGE
    - docker tag $IMAGE $REPO:latest
    - docker push $REPO:latest
  only:
    - master
  services:
    - gcr.io/brickchain-docker/gitlab-builder-docker

# upload to aws:
#   image: gcr.io/brickchain-docker/gitlab-builder-deploy
#   stage: deploy
#   only:
#     - master
#   script:
#     - eval $(vaultenv read -s secret/env/gitlab-ci/s3)
#     - aws s3 cp realm-version.txt s3://brickchain-artifacts/
#     - aws s3 cp realm-darwin-amd64 s3://brickchain-artifacts/
#     - aws s3 cp realm-darwin-386 s3://brickchain-artifacts/
#     - aws s3 cp realm-linux-amd64 s3://brickchain-artifacts/
#     - aws s3 cp realm-linux-386 s3://brickchain-artifacts/
#     - aws s3 cp realm-linux-armv5 s3://brickchain-artifacts/
#     - aws s3 cp realm-linux-armv6 s3://brickchain-artifacts/
#     - aws s3 cp realm-linux-armv7 s3://brickchain-artifacts/
#     - aws s3 cp realm-linux-arm64 s3://brickchain-artifacts/

deploy to staging:
  image: gcr.io/brickchain-docker/gitlab-builder-deploy
  stage: deploy
  only:
    - master
  script:
    - /scripts/deploy_k8s.sh -name realm-ng -port 6593 -image $IMAGE -instances 3
  artifacts:
      paths:
      - pod.yml
      - svc.yml
      - ingress.yml
      when: always
  variables:
    GCE_PROJECT: "integrity-staging"
    REGION: "europe-west1"
    ZONE: "europe-west1-c"
    CLUSTER: "staging-1"
    ENV_NAME: "staging"
    URL: "realm-ng.svc-staging.plusintegrity.com"
    SQL_NAME: "postgres-staging"
    REDIS: "redis:6379"
    ALLOWED_ENDPOINTS: "https://realm-ng.svc-staging.plusintegrity.com https://staging.plusintegrity.com https://staging.integrity.app"
    DATADOG: "dogstatsd.default:8125"
    ADMIN_URL: "https://staging.integrity.app"
    REVOCATION: "https://revocation.svc-staging.plusintegrity.com"
    FILESTORE: "gcs"
    GCS_BUCKET: "integrity-realm-ng-staging"
    GCS_LOCATION: "EU"
    GCS_PROJECT: "integrity-staging"
    PUBSUB: "google"
    PUBSUB_PROJECT_ID: "integrity-staging"
    REALM_TOPIC: "staging-realms-ng"
  environment:
    name: staging
    url: https://realm-ng.svc-staging.plusintegrity.com/

deploy to production:
  image: gcr.io/brickchain-docker/gitlab-builder-deploy
  stage: deploy
  when: manual
  only:
    - master
  script:
    - /scripts/deploy_k8s.sh -name realm-ng -port 6593 -image $IMAGE -instances 3
  artifacts:
      paths:
      - pod.yml
      - svc.yml
      - ingress.yml
      when: always
  variables:
    GCE_PROJECT: "integrity-prod"
    REGION: "europe-west1"
    ZONE: "europe-west1-c"
    CLUSTER: "prod-1"
    ENV_NAME: "production"
    URL: "realm.svc.integrity.app"
    SQL_NAME: "postgres-prod-1"
    REDIS: "redis:6379"
    ALLOWED_ENDPOINTS: "https://realm.svc.integrity.app"
    DATADOG: "dogstatsd.default:8125"
    ADMIN_URL: "https://admin.integrity.app"
    REVOCATION: "https://revocation.svc.integrity.app"
    FILESTORE: "gcs"
    GCS_BUCKET: "integrity-realm-ng-prod"
    GCS_LOCATION: "EU"
    GCS_PROJECT: "integrity-prod"
    PUBSUB: "google"
    PUBSUB_PROJECT_ID: "integrity-prod"
    REALM_TOPIC: "prod-realms-ng"
  environment:
    name: production
    url: https://realm.svc.integrity.app/
